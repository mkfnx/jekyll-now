I"˚W<p>En esta primera fase de nuestro proyecto de calculadora de pesas de gimnasio programaremos un algoritmo en JavaScript que resuelva un caso b√°sico de este problema. Recordemos que este proyecto puede servir como gu√≠a para proyectos de la certificaci√≥n frontend de freeCodeCamp. Y que este post es parte de una serie para crear un proyecto completo y que puedes ver completa en <a href="https://mkfnx.github.io/fCC-Barbell//">https://mkfnx.github.io/fCC-Barbell//</a></p>

<p>Puedes ver la soluci√≥n de este problema en este CodePen: <a href="https://codepen.io/mkfnx/pen/OJVgbMv/">https://codepen.io/mkfnx/pen/OJVgbMv/</a></p>

<h1 id="descripci√≥n-del-problema">Descripci√≥n Del Problema</h1>
<p>Crea una funci√≥n <code class="highlighter-rouge">getPlatesForWeight(weight)</code> la cual recibe el par√°metro <code class="highlighter-rouge">weight</code> el cual es un n√∫mero que indica el peso en libras que deseamos para nuestra barra ol√≠mpica. Este peso debe ser mayor de 45 lbs y debe ser un m√∫ltiplo de 5, ya que solo se pueden lograr estos pesos con los discos est√°ndar, los cuales son de 2.5, 5, 10, 25, 35 y 45 lbs.</p>

<p>La funci√≥n mencionada debe devolver un <code class="highlighter-rouge">Object</code> (o <code class="highlighter-rouge">Map</code>) cuyas llaves ser√°n los pesos de los discos est√°ndar y cuyos valores ser√°n la cantidad de discos de cada peso que se deben cargar en cada lado de la barra, ya que el peso debe estar balanceado. Y otro punto a tomar en cuenta es que la barra pesa por si misma 45 lbs.</p>

<p>Algo importante dado los puntos anteriores es que el peso que de verdad debemos calcular ser√° el peso original indicado en la funci√≥n, menos las 45 lbs de la barra y esto dividio entre 2, ya que debemos balancear el peso en cada lado de la barra. Podemos resumir eso en esta f√≥rmula:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Peso a calcular = (Peso Original - 45) / 2
</code></pre></div></div>

<p>Un ejemplo para tener esto un poco m√°s claro: Al llamar a nuestra funci√≥n de esta forma <code class="highlighter-rouge">getPlatesForWeight(200)</code>, para calcular la cantidad de discos necesarios para tener una barra de 200 lbs, la funci√≥n debe devolver el siguiente map:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="mi">10</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="mf">2.5</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="mi">25</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="mi">35</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="mi">45</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="mi">5</span><span class="p">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Lo cual corresponde a una barra cargada de la siguiente manera</p>

<h2><img src="/images/barbell-calculator-example-just-lift-app.png" alt="Ejemplo de resultado de proyecto" /></h2>
<p>(Captura de pantalla de la <a href="(https://play.google.com/store/apps/details?id=feliform.justlift)">app Just Lift</a>, creada por Feliform)</p>

<p>Aqu√≠ vemos que la suma del peso para lograr una carga de 200 lbs queda de la siguiente forma:</p>

<ul>
  <li>Peso lado izquierdo: 77.5 (1 disco de 45 + 1 disco de  25 + 1 disco de  5 + 1 disco de 2.5)</li>
  <li>Peso lado derecho: 77.5</li>
  <li>Peso barra: 45</li>
  <li>Total: 200 (77.5 de lado izquierdo + 77.5 de lado derecho + 45 de baarra)</li>
</ul>

<h2 id="nota-debemos-usar-menor-cantidad-posible-de-discos">Nota: Debemos usar menor cantidad posible de discos</h2>
<p>El mismo peso se puede ajustar de diferentes formas con los discos est√°ndar, por ejemplo, 20 lbs pueden ser 2 discos de 10 lbs o 4 discos de 5 lbs y as√≠ con muchos otros pesos y discos, sin embargo, debido a que en los gimnasios compartimos el equipo con otras personas no queremos tardar mucho ajustando nuestra barra, as√≠ que para calcular este peso trataremos de mover el menor n√∫mero posible de discos y esto tendr√° como consecuencia que deberemos intentar colocar los discos m√°s pesados primero.</p>

<h1 id="entorno-de-desarrollo-y-creaci√≥n-del-proyecto">Entorno de desarrollo y creaci√≥n del proyecto</h1>
<p>Para este ejemplo usaremos <a href="http://codepen.io">CodePen</a>, la cual es una herramienta que nos permite editar y ejecutar nuestro c√≥digo directamente del navegador. Dado que en esta fase del proyecto a√∫n no mostraremos cosas en la vista principal del navegador, estaremos usando la consola y la instrucci√≥n <code class="highlighter-rouge">console.log</code> para mostrar nuestros resultados y hacer nuestras pruebas.</p>

<p>Para crear un proyecto en CodePen visita la direcci√≥n <a href="https://codepen.io/pen/">https://codepen.io/pen/</a> ah√≠ ver√°s el entorno de desarrollo de CodePen (para guardar tu proyecto deber√°s crear una cuenta), nosotros estaremos trabajando en el 3er panel el cual tiene el t√≠tulo de JS. Y para poder ver los resultados de esta fase del proyecto debemos presionar el bot√≥n de abajo a la izquierda que dice Console.</p>

<p><img src="/images/code-pen-environment.png" alt="Vista de entorno de CodePen" /></p>

<h1 id="pasos-de-la-soluci√≥n">Pasos de la Soluci√≥n</h1>

<p>A continuaci√≥n vamos a describir los pasos y las secciones de c√≥digo que permiten solucionar este problema.</p>

<p>Recuerda que en este enlace <a href="https://codepen.io/mkfnx/pen/OJVgbMv/">https://codepen.io/mkfnx/pen/OJVgbMv/</a> puedes en cualquier momento puedes consultar una soluci√≥n de esta fase del proyecto para obtener m√°s contexto.</p>

<h2 id="configuraci√≥n-inicial">Configuraci√≥n inicial</h2>
<p>Como primer paso, definimos valores constantes que usaremos en el proyecto para obtener un c√≥digo m√°s limpio, y as√≠ poder los llamados <a href="https://es.wikibooks.org/wiki/Refactorizaci%C3%B3n/Reemplazar_n%C3%BAmero_m%C3%A1gico_con_constante_simb%C3%B3lica">‚Äún√∫meros m√°gicos‚Äù</a>, los cuales se consideran una mala pr√°ctica.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">PLATE_2_5</span> <span class="o">=</span> <span class="mf">2.5</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">PLATE_5</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">PLATE_10</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">PLATE_25</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">PLATE_35</span> <span class="o">=</span> <span class="mi">35</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">PLATE_45</span> <span class="o">=</span> <span class="mi">45</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">BARBELL_WEIGHT</span> <span class="o">=</span> <span class="mi">45</span><span class="p">;</span>
</code></pre></div></div>

<p>Como podemos ver, las constantes que necesitamos son simplemente los valores de los pesos de nuestros discos y de la barra.</p>

<p>A continuaci√≥n definimos nuestra funci√≥n y verificar que se llama correctamente, colocandole un <code class="highlighter-rouge">console.log</code> que muestre el peso que se pasa a la funci√≥n.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getNeededPlatesForWeight</span><span class="p">(</span><span class="nx">weight</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">weight is: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">weight</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">getNeededPlatesForWeight</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span> <span class="c1">// Al llamar esta funci√≥n veremos en la consola un mensaje que muestra el peso con el que la invocamos</span>
</code></pre></div></div>

<p>Inicializar el Map de discos. Usar notaci√≥n de llave (roder de [] los valores de key de nuestro Object)</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">neededPlates</span> <span class="o">=</span> <span class="p">{</span>
      <span class="p">[</span><span class="nx">PLATE_2_5</span><span class="p">]:</span> <span class="mi">0</span><span class="p">,</span>
      <span class="p">[</span><span class="nx">PLATE_5</span><span class="p">]:</span> <span class="mi">0</span><span class="p">,</span>
      <span class="p">[</span><span class="nx">PLATE_10</span><span class="p">]:</span> <span class="mi">0</span><span class="p">,</span>
      <span class="p">[</span><span class="nx">PLATE_25</span><span class="p">]:</span> <span class="mi">0</span><span class="p">,</span>
      <span class="p">[</span><span class="nx">PLATE_35</span><span class="p">]:</span> <span class="mi">0</span><span class="p">,</span>
      <span class="p">[</span><span class="nx">PLATE_45</span><span class="p">]:</span> <span class="mi">0</span>
  <span class="p">};</span>
</code></pre></div></div>

<h2 id="validaciones">Validaciones</h2>

<p>Verificar que el peso indicado es mayor que el peso de la barra (45 lbs), de no ser as√≠, no es necesario agregar discos y por lo tanto no tenemos nada que calcular, as√≠ que devolvemos el Map de discos necesarios tal y como lo inicializamos con los valores en 0s.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">weight</span> <span class="o">&lt;=</span> <span class="nx">BARBELL_WEIGHT</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">lifting the empty bar is enough for that weight</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">neededPlates</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Verificar que el peso restante (ya contando el peso de la barra) sea un m√∫ltiplo de 2.5, es decir que pueda llegarse a ese peso usando los discos est√°ndar, de no ser as√≠, devolvemos el Map de discos necesarios tal y como lo inicializamos con los valores en 0s.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">weightPerSide</span> <span class="o">=</span> <span class="p">(</span><span class="nx">weight</span> <span class="o">-</span> <span class="nx">BARBELL_WEIGHT</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">weightPerSide</span> <span class="o">%</span> <span class="nx">PLATE_2_5</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">The requested weight can</span><span class="se">\'</span><span class="s1">t be exactly loaded with the standard weight plates</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">neededPlates</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="procedimiento-principal">Procedimiento principal.</h2>
<p>Agregamos discos, empezando por el de mayor peso, hasta que logremos el peso deseado y finalmente devolvemos el nuestro resultado, un Map con la cantidad de discos correspondiente.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="p">(</span><span class="nx">weightPerSide</span> <span class="o">&gt;=</span> <span class="nx">PLATE_2_5</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">weightPerSide</span> <span class="o">&gt;=</span> <span class="nx">PLATE_45</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">neededPlates</span><span class="p">[</span><span class="nx">PLATE_45</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="nx">weightPerSide</span> <span class="o">-=</span> <span class="nx">PLATE_45</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">weightPerSide</span> <span class="o">&gt;=</span> <span class="nx">PLATE_35</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">neededPlates</span><span class="p">[</span><span class="nx">PLATE_35</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="nx">weightPerSide</span> <span class="o">-=</span> <span class="nx">PLATE_35</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">weightPerSide</span> <span class="o">&gt;=</span> <span class="nx">PLATE_25</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">neededPlates</span><span class="p">[</span><span class="nx">PLATE_25</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="nx">weightPerSide</span> <span class="o">-=</span> <span class="nx">PLATE_25</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">weightPerSide</span> <span class="o">&gt;=</span> <span class="nx">PLATE_10</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">neededPlates</span><span class="p">[</span><span class="nx">PLATE_10</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="nx">weightPerSide</span> <span class="o">-=</span> <span class="nx">PLATE_10</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">weightPerSide</span> <span class="o">&gt;=</span> <span class="nx">PLATE_5</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">neededPlates</span><span class="p">[</span><span class="nx">PLATE_5</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="nx">weightPerSide</span> <span class="o">-=</span> <span class="nx">PLATE_5</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">weightPerSide</span> <span class="o">&gt;=</span> <span class="nx">PLATE_2_5</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">neededPlates</span><span class="p">[</span><span class="nx">PLATE_2_5</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="nx">weightPerSide</span> <span class="o">-=</span> <span class="nx">PLATE_2_5</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Weight sucessfully loaded</span><span class="dl">'</span><span class="p">);</span>
<span class="k">return</span> <span class="nx">neededPlates</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="pruebas-y-depuraci√≥n">Pruebas y Depuraci√≥n</h2>
<p>Probemos llamar a nuestra funci√≥n con distintos valores que nos ayuden a verificar que se comporta de manera correcta en varios escenarios, por ejemplo, pasando valores menores al peso de 45 lbs de la barra y pasando distintos valores v√°lidos y verificando que la suma del peso de los discos de ambos lados y la barra sea la correcta.</p>

<p>Podemos usar un depurador o debugger para analizar de manera m√°s detallada la ejecuci√≥n de nuestro c√≥digo en cualquier secci√≥n en la que tengamos dudas, sin embargo me parece que CodePen no es la opci√≥n m√°s c√≥moda para depurar, as√≠ que para esto recomiendo usar otra herramienta, como Visual Studio Code o WebStorm.</p>

<h2 id="separar-el-c√≥digo-en-funciones-para-mantenerlo-limpio">Separar el c√≥digo en funciones para mantenerlo limpio.</h2>

<p>Nuestro proyecto funciona correctamente para el caso que describimos, sin embargo, se pueden realizar mejoras de estilo al c√≥digo que nos ayudar√°n a hacer el c√≥digo m√°s entendible y hacerlo m√°s f√°cil de modificar en el futuro o por otros compa√±eros de equipo.</p>

<p>Una t√©cnica muy simple y efectiva para mejorar la legibilidad del c√≥digo es la de separarla en peque√±as funciones que realicen un prop√≥sito espec√≠fico dentro de nuestro programa. Cuando creamos una nueva funci√≥n de cierta manera creamos una etiqueta que describe cierto proceso o secci√≥n particular del programa, por lo tanto al tener varias funciones podemos sustituir bloques grandes de c√≥digo por funciones que describan una funci√≥n y al combinarlas obtendremos c√≥digo que ser√° muy similar a leer un texto normal.</p>

<p>En este caso podemos usar las secciones indicadas en este texto para identificar funciones, de manera que tendremos una funci√≥n para inicializar un map, funciones para realizar validaciones y una funci√≥n para realizar nuestro proceso principal (colocar discos en la barra). Al crear estas funciones y combinarlas obtendremos un programa, y en particular un bloque principal, m√°s legible, el cual se ver√° as√≠.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getNeededPlatesForWeight</span><span class="p">(</span><span class="nx">weight</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">weight is: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">weight</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">neededPlates</span> <span class="o">=</span> <span class="nx">initStandardWeightPlateSet</span><span class="p">();</span> <span class="c1">// Funci√≥n para inicializar</span>
    <span class="kd">let</span> <span class="nx">neededPlateWeight</span> <span class="o">=</span> <span class="nx">weight</span> <span class="o">-</span> <span class="nx">BARBELL_WEIGHT</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isNeededPlateWeightValid</span><span class="p">(</span><span class="nx">neededPlateWeight</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// Fuci√≥n para validaciones</span>
        <span class="k">return</span> <span class="p">[];</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">neededWeightBySide</span> <span class="o">=</span> <span class="nx">neededPlateWeight</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
    <span class="nx">calculateNeededPlatesBySide</span><span class="p">(</span><span class="nx">neededPlates</span><span class="p">,</span> <span class="nx">neededWeightBySide</span><span class="p">);</span> <span class="c1">// Funci√≥n para agregar peso a la barra</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Load the following plates in each side of the bar: </span><span class="dl">'</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">neededPlates</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>El c√≥digo completo de el programa dividido en funciones lo podemos ver en este otro CodePen <a href="https://codepen.io/mkfnx/pen/ZEGyLMX/">https://codepen.io/mkfnx/pen/ZEGyLMX/</a></p>

<h2 id="conclusi√≥n-de-esta-fase">Conclusi√≥n de esta fase</h2>

<p>Pudimos ver como resolver un algoritmo b√°sico con JavaScript para un problema real, para el que incluso existen apps en tiendas que lo solucionan y los cuales son similares a proyectos necesarios para la certificaci√≥n de freeCodeCamp.</p>

<p>Hicimos una r√°pida revisi√≥n de herramientas √∫tiles para crear y analizar nuestros proyectos.</p>

<p>Analizamos este problema en distintas secciones con prop√≥sito espec√≠fico como inicializaci√≥n, validaci√≥n y problema principal.</p>

<p>Tambi√©n hicimos algunas observaciones sobre la importancia del estilo del c√≥digo y vimos como al dividirlo en funciones podemos hacerlo m√°s f√°cil de leer.</p>

<h2 id="nota-final">Nota final</h2>

<p>La definici√≥n del problema puede ser algo confusa, debido principalmente a como se distribuye el peso de la barra (peso por cada lado y peso de la barra misma), as√≠ que si tienes alguna duda no dudes en contactarnos en el <a href="https://www.facebook.com/groups/free.code.camp.mexico.df/">grupo de Facebook de freeCodeCamp CDMX</a> o el <a href="https://join.slack.com/t/fcccdmx/shared_invite/enQtOTc5MDc3NDMxNzY2LWZiMDk2OGVmMDk2ZjkzY2JlMzQ0N2VhY2ZjYTk3NTUyYmE0MGFlNDQ1NGVkOGUzNjg3NDY0YWViN2FkMDkwOWE">Slack de freeCodeCamp CDMX</a>.</p>
:ET